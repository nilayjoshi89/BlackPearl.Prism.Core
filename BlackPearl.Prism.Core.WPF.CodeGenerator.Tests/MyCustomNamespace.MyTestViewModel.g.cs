// <auto-generated>
//   BlackPearl.Prism.Core - WPF
//   This generator is based on MvvmGen, a tool created by Thomas Claudius Huber (https://www.thomasclaudiushuber.com)
// </auto-generated>
using BlackPearl.Prism.Core.WPF;
using Prism.Commands;


namespace MyCustomNamespace
{
    partial class MyTestViewModel : BlackPearlViewModelBase
    {
        #region Method Overrides
        protected override void Initialize()
        {
            ABCCommand = new DelegateCommand<MyCustomNamespace.MyCustomData>(OnABCChanged, CanExecuteABCCommand);
        }
        #endregion Method Overrides

        #region Commands
        public DelegateCommand<MyCustomNamespace.MyCustomData> ABCCommand { get; private set; }
        #endregion Commands

        #region Properties

        public int ABC
        {
            get => _abc;
            set
            {
                if (_abc == value)
                {
                    return;
                }
                PropertyChangeArg<int> changeArgument = new PropertyChangeArg<int>(_abc, value);
                _abc = value;
                RaisePropertyChanged(nameof(ABC));
                RaisePropertyChanged("NewProperty");
                ABCCommand.RaiseCanExecuteChanged();
                OnABCChangedHandler(changeArgument);
            }
        }

        public string Unknown
        {
            get => unknown;
            set
            {
                if (unknown == value)
                {
                    return;
                }
                unknown = value;
                RaisePropertyChanged(nameof(Unknown));
                ABCCommand.RaiseCanExecuteChanged();
            }
        }

        public string ModelFirstName
        {
            get => model.FirstName;
            set
            {
                if (model?.FirstName == value)
                {
                    return;
                }
                PropertyChangeArg<string> changeArgument = new PropertyChangeArg<string>(model.FirstName, value);
                model.FirstName = value;
                RaisePropertyChanged(nameof(ModelFirstName));
                OnModelFirstNameChangedHandler(changeArgument);
            }
        }
        #endregion Properties

        #region Property handlers
        partial void OnABCChangedHandler(PropertyChangeArg<int> arg);

        partial void OnModelFirstNameChangedHandler(PropertyChangeArg<string> arg);
        #endregion Property handlers
    }
}
